holdout_pred <- holdout_noChar %>%
mutate(
predicted_log_latestPrice = log_latestPrice_predictions,
predicted_latestPrice = exp(log_latestPrice_predictions))
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))
x_new <- model.matrix(~ ., data = ah_noDate_train_noFactors)[, -1]  # Remove intercept column
holdout_predictions <- predict(bart_ah, newdata = x_new)
# Add predictions to the new dataset
new_data_with_preds <- new_data_noFactors %>%
mutate(predicted_log_latestPrice = log_latestPrice_predictions,
predicted_latestPrice = exp(log_latestPrice_predictions))
holdout_predictions <- predict(bart_ah, newdata = x_new)
holdout_predictions <- predict(bart_ah, newdata = x_new)
# Add predictions to the new dataset
holdout_noChar <- holdout_noChar %>%
mutate(predicted_log_latestPrice = holdout_predictions,
predicted_latestPrice = exp(holdout_predictions))
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
# Create the model matrix for the new dataset
x_new <- model.matrix(~ ., data = holdout_noChar)[, -1]  # Remove intercept column
# Make predictions using the trained BART model
holdout_predictions <- predict(bart_ah, newdata = x_new)
ah_noDate_train <- ah_train %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate)
ah_noDate_train_noFactors <- ah_noDate_train %>%
select(where(~ !is.factor(.)))
ah_noDate_test <- ah_test %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate)
ah_noDate_test_noFactors <- ah_noDate_test %>%
select(where(~ !is.factor(.)))
# Create model matrices
x_train <- model.matrix(~ . - log_latestPrice, data = ah_noDate_train_noFactors)[, -1]
x_test <- model.matrix(~ . - log_latestPrice, data = ah_noDate_test_noFactors)[, -1]
y_train <- ah_noDate_train_noFactors$log_latestPrice
y_test <- ah_noDate_test_noFactors$log_latestPrice
set.seed(2)
bart_ah <- gbart(x_train, y_train, x.test = x_test)
bart_pred <- bart_ah$yhat.test.mean
actual_prices <- exp(ah_test$log_latestPrice)
predicted_prices <- exp(bart_pred)
rmse <- sqrt(mean((actual_prices - predicted_prices)^2))
rmse
# Num times each variable appeared in collection of trees
ord <- order(bart_ah$varcount.mean, decreasing = T)
bart_ah$varcount.mean[ord]
#Apply same feature engineering and cleaning to holdout
holdout_clean <- holdout %>%
select(-streetAddress, -description) %>%
mutate(
hasOneAccessibilityFeature = ifelse(numOfAccessibilityFeatures > 0.5, TRUE, FALSE),
livingAreaPercent = ((livingAreaSqFt/numOfStories)/lotSizeSqFt) * 100,
totalRooms = numOfBathrooms + numOfBedrooms,
bathToBedRatio = ifelse(numOfBedrooms > 0, numOfBathrooms/numOfBedrooms, 1)
) %>%
mutate(garageSpaceCat = case_when(
garageSpaces == 0 ~ "0",
garageSpaces %in% 1:2 ~ "1",
garageSpaces %in% 3:6 ~ "2",
garageSpaces > 6 ~ "3")
) %>%
mutate(garageSpaceCat = factor(garageSpaceCat,
levels = c("0", "1", "2", "3"))) %>%
mutate(numParkFeatCat = case_when(
numOfParkingFeatures == 0 ~ "0",
numOfParkingFeatures %in% 1:2 ~ "1",
numOfParkingFeatures %in% 3:4 ~ "2",
numOfParkingFeatures > 4 ~ "3")
) %>%
mutate(numParkFeatCat = factor(numParkFeatCat,
levels = c("0", "1", "2", "3"))) %>%
mutate(numSecFeatCat = case_when(
numOfSecurityFeatures == 0 ~ "0",
numOfSecurityFeatures %in% 1:2 ~ "1",
numOfSecurityFeatures %in% 3:4 ~ "2",
numOfSecurityFeatures > 4 ~ "3")
) %>%
mutate(numSecFeatCat = factor(numSecFeatCat,
levels = c("0", "1", "2", "3"))) %>%
mutate(hasCommFeatCat = ifelse(numOfCommunityFeatures > 1, 1, 0)) %>%
mutate(hasCommFeatCat = factor(hasCommFeatCat,
levels = c("1", "0"))) %>%
select(
-latestPrice,
-homeType,
-numOfAccessibilityFeatures,
-hasGarage,
-livingAreaSqFt,
-numOfStories,
-lotSizeSqFt,
-numOfBathrooms,
-numOfBedrooms,
-garageSpaces,
-numOfParkingFeatures,
-numOfSecurityFeatures,
-numOfCommunityFeatures,
-avgSchoolSize,
-MedianStudentsPerTeacher,
-hasAssociation
)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
# Create the model matrix for the new dataset
x_new <- model.matrix(~ ., data = holdout_noChar)[, -1]  # Remove intercept column
# Make predictions using the trained BART model
holdout_predictions <- predict(bart_ah, newdata = x_new)
# Convert predictions to a vector if needed (depends on predict() output)
# Here, assuming `predict()` returns a matrix where each row is a sample
log_latestPrice_predictions <- rowMeans(holdout_predictions)
# Add predictions to the new dataset
holdout_noChar <- holdout_noChar %>%
mutate(predicted_log_latestPrice = log_latestPrice_predictions,
predicted_latestPrice = exp(log_latestPrice_predictions))
log_latestPrice_predictions <- rowMeans(holdout_predictions)  # Use rowMeans if predictions are in matrix form
# Add predictions to the new dataset
holdout_noChar <- holdout_noChar %>%
mutate(predicted_log_latestPrice = log_latestPrice_predictions,
predicted_latestPrice = exp(log_latestPrice_predictions))
print(nrow(x_new))
print(dim(holdout_predictions))
print(length(log_latestPrice_predictions))
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
# Create the model matrix for the new dataset
x_new <- model.matrix(~ ., data = holdout_noChar)[, -1]  # Remove intercept column
# Make predictions using the trained BART model
holdout_predictions <- predict(bart_ah, newdata = x_new)
log_latestPrice_predictions <- rowMeans(holdout_predictions)
# Add predictions to the new dataset
holdout_noChar <- holdout_noChar %>%
mutate(predicted_log_latestPrice = log_latestPrice_predictions,
predicted_latestPrice = exp(log_latestPrice_predictions))
dim(log_latestPrice_predictions)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ . - log_latestPrice, data = holdout_noChar)[, -1]
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_ah, newx = x_holdout)$yhat.test.mean
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- gbart::predict(bart_ah, newx = x_holdout)$yhat.test.mean
install.packages("gbart")
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_model, newx = x_holdout)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_ah, newx = x_holdout)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_ah, newx = x_holdout, newdata = holdout_noChar)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_ah, newdata = holdout_noChar)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
set.seed(2)  # To ensure reproducibility
bart_holdout_pred <- predict(bart_ah, x_test = holdout_noChar)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
bart_holdout_pred <- predict(bart_ah, newdata = x_holdout)
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred$yhat
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred$yhat.mean
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred$yhat.test.mean
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred$yhat
bart_holdout_pred
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred[, 1]
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- bart_holdout_pred
str(bart_holdout_pred)
avg_predictions <- rowMeans(bart_holdout_pred)
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- avg_predictions
str(avg_predictions)
avg_predictions <- colMeans(bart_holdout_pred)
# Add predictions to the holdout_noChar dataset
holdout_noChar$predicted_log_latestPrice <- avg_predictions
View(holdout_noChar)
holdout_noChar$predicted_latestPrice <- exp(holdout_noChar$predicted_log_latestPrice)
View(holdout)
#use BART to predict log_latestPrice
holdout_noChar <- holdout_clean %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.logical), as.numeric)) %>%
select(-latest_saledate) %>%
select(where(~ !is.factor(.)))  # Ensure no factor variables
x_holdout <- model.matrix(~ ., data = holdout_noChar)[, -1]
# Predict using the trained BART model
bart_holdout_pred <- predict(bart_ah, newdata = x_holdout)
avg_predictions <- colMeans(bart_holdout_pred)
holdout_predicted_prices <- holdout_noChar %>%
mutate(
predicted_log_latestPrice = avg_predictions,
predicted_latestPrice = exp(predicted_log_latestPrice)
) %>% select (predicted_log_latestPrice, predicted_latestPrice)
write_csv(holdout_predicted_prices, file = "holdout_predicted_prices.csv", row.names = FALSE)
write_csv(holdout_predicted_prices, file = "holdout_predicted_prices.csv")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
install.packages("rticles")
---
# Supported options:
#   sn-nature:       Style for submissions to Nature Portfolio journals
#   sn-basic:        Basic Springer Nature Reference Style/Chemistry Reference Style
#   sn-mathphys:     Math and Physical Sciences Reference Style
#   sn-aps:          American Physical Society (APS) Reference Style
#   sn-vancouver:    Vancouver Reference Style
#   sn-apa:          APA Reference Style
#   sn-chicago:      Chicago-based Humanities Reference Style
#   default:         Default
write_csv(holdout_predicted_prices, file = "holdout_predicted_prices.csv")
```
tinytex::reinstall_tinytex()
tinytex:: install_tinytex()
tinytex::tlmgr_update()
tinytex:::install_prebuilt()
library(readr)
library(tidyverse)
billboard <- read_csv("billboard.csv")
source("C:/Users/Carissa/OneDrive - The University of Texas at Austin/STA380 Intro to Machine Learning/Pt 2 Exercises/Exercises.R", echo=TRUE)
setwd("C:/Users/Carissa/OneDrive - The University of Texas at Austin/STA380 Intro to Machine Learning/Pt 2 Exercises")
source("C:/Users/Carissa/OneDrive - The University of Texas at Austin/STA380 Intro to Machine Learning/Pt 2 Exercises/Exercises.R", echo=TRUE)
library(dplyr)
billboard <- read_csv("billboard.csv") %>%
select(performer,
song,
year,
week,
week_position)
knitr::opts_chunk$set(echo = TRUE)
billboard %>%
group_by(performer, song) %>%
summarise(count = count(week)) %>%
arrange(desc(count))
billboard %>%
group_by(performer, song) %>%
summarise(count = n(week)) %>%
arrange(desc(count))
billboard %>%
group_by(performer, song) %>%
summarise(count = n()) %>%
arrange(desc(count))
top_10_songs <- billboard %>%
group_by(performer, song) %>%
summarise(count = n()) %>%
arrange(desc(count))
head(top_10_songs, 10)
top_10_songs <- billboard %>%
group_by(performer, song) %>%
summarise(count = n()) %>%
arrange(desc(count))
head(top_10_songs, 10)
songs_per_yr <- billboard %>%
filter(year ! %in% c(1958, 2021))
songs_per_yr <- billboard %>%
filter(year !%in% c(1958, 2021))
songs_per_yr <- billboard %>%
filter(year %in% ~c(1958, 2021))
songs_per_yr <- billboard %>%
filter(year != c(1958, 2021))
songs_per_yr <- billboard %>%
filter(year != c(1958, 2021)) %>%
group_by(year) %>%
summarise(num_unique_songs = n_distinct(paste(performer, song)))
View(songs_per_yr)
songs_per_yr <- billboard %>%
filter(!(year %in% c(1958, 2021))) %>%
group_by(year) %>%
summarise(num_unique_songs = n_distinct(paste(performer, song)))
library(ggplot2)
?ggplot
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line()
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
theme_minimal()
songs_per_yr <- billboard %>%
filter(!(year %in% c(1958, 2021))) %>%
group_by(year) %>%
summarise(num_unique_songs = n_distinct(paste(performer, song)))
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
labs(y = "Number of Unique Songs", x = "Year") +
theme_minimal()
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
labs("Number of Unique Songs per Year", y = "Number of Unique Songs", x = "Year") +
theme_minimal()
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
labs(title = "Number of Unique Songs per Year",
y = "Number of Unique Songs",
x = "Year") +
theme_minimal()
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
labs(title = "Number of Unique Songs per Year (1959 - 2020)",
y = "Number of Unique Songs",
x = "Year") +
theme_minimal()
ggplot(songs_per_yr, aes(x = year, y = num_unique_songs)) +
geom_line() +
labs(title = "Music Diversity in Billboard Top 100 Charts from 1959 - 2020",
y = "Number of Unique Songs",
x = "Year") +
theme_minimal()
songs_charting <- billboard %>%
group_by(performer, song) %>%
summarise(count = n()) %>%
arrange(desc(count))
head(songs_charting, 10)
ten_week_artists <- songs_charting %>%
filter(count >= 30)
View(ten_week_artists)
ten_week_artists <- songs_charting %>%
filter(count >= 30) %>%
group_by(performer) %>%
summarise(ten_week_hits = n())
View(ten_week_artists)
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>%
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30)
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_bar()
ggplot(ten_week_artists, aes(x = performer)) +
geom_bar()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col()
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>%
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30) %>%
arrange(desc(ten_week_hits))
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col() +
theme_minimal()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted over 10 Weeks",
x = "Year") +
theme_minimal()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted over 10 Weeks",
x = "Artist") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted over 10 Weeks",
x = "Artist") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_minimal()
ggplot(ten_week_artists, aes(x = performer, y = ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
ggplot(ten_week_artists, aes(fct_reorder(performer, ten_week_hits), ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>%
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30)
ggplot(ten_week_artists, aes(fct_reorder(performer, ten_week_hits), ten_week_hits)) +
geom_col() +
labs(title = "Artists with More than 30 Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted for over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>% #filter weeks charted >= 10
group_by(performer)
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>% #filter weeks charted >= 10
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30)
ggplot(ten_week_artists, aes(fct_reorder(performer, ten_week_hits), ten_week_hits)) +
geom_col() +
labs(title = "Artists with 30-or-More Ten-Week Hits from 1958 - 2021",
y = "Number of Songs that Charted for over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>% #filter weeks charted >= 10
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30)
ggplot(ten_week_artists, aes(fct_reorder(performer, ten_week_hits), ten_week_hits)) +
geom_col() +
labs(title = "Top Artists (1958-2021) with 30+ Songs Each Charting 10+ Weeks on Billboard Top 100",
y = "Number of Songs that Charted for over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
ten_week_artists <- songs_charting %>%
filter(count >= 10) %>% #filter weeks charted >= 10
group_by(performer) %>%
summarise(ten_week_hits = n()) %>%
filter(ten_week_hits >= 30)
ggplot(ten_week_artists, aes(fct_reorder(performer, ten_week_hits), ten_week_hits)) +
geom_col() +
labs(title = "Top Artists (1958-2021) with 30+ Songs Each Charting 10+ Weeks",
y = "Number of Songs that Charted for over 10 Weeks",
x = "Artist") +
coord_flip() +
theme_minimal()
